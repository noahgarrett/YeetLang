{
   "Program": {
      "statements": [
         {
            "LetStatement": {
               "token": "let",
               "name": {
                  "type": "IdentifierLiteral",
                  "value": "test"
               },
               "value": {
                  "type": "FunctionLiteral",
                  "name": "test",
                  "parameters": [
                     {
                        "type": "IdentifierLiteral",
                        "value": "a"
                     },
                     {
                        "type": "IdentifierLiteral",
                        "value": "b"
                     }
                  ],
                  "body": {
                     "type": "BlockStatement",
                     "statements": [
                        {
                           "type": "ExpressionStatement",
                           "expr": {
                              "type": "IfExpression",
                              "condition": {
                                 "type": "InfixExpression",
                                 "left_node": {
                                    "type": "IdentifierLiteral",
                                    "value": "a"
                                 },
                                 "operator": "<",
                                 "right_node": {
                                    "type": "IdentifierLiteral",
                                    "value": "b"
                                 }
                              },
                              "consequence": {
                                 "type": "BlockStatement",
                                 "statements": [
                                    {
                                       "type": "ReturnStatement",
                                       "return_value": {
                                          "type": "InfixExpression",
                                          "left_node": {
                                             "type": "IdentifierLiteral",
                                             "value": "a"
                                          },
                                          "operator": "+",
                                          "right_node": {
                                             "type": "IdentifierLiteral",
                                             "value": "b"
                                          }
                                       }
                                    }
                                 ]
                              },
                              "alternative": {
                                 "type": "BlockStatement",
                                 "statements": [
                                    {
                                       "type": "ReturnStatement",
                                       "return_value": {
                                          "type": "IdentifierLiteral",
                                          "value": "a"
                                       }
                                    }
                                 ]
                              }
                           }
                        }
                     ]
                  }
               }
            }
         },
         {
            "LetStatement": {
               "token": "let",
               "name": {
                  "type": "IdentifierLiteral",
                  "value": "a"
               },
               "value": {
                  "type": "IntegerLiteral",
                  "value": 4
               }
            }
         },
         {
            "AssignStatement": {
               "type": "AssignStatement",
               "identifier": {
                  "type": "IdentifierLiteral",
                  "value": "a"
               },
               "value": {
                  "type": "IntegerLiteral",
                  "value": 23
               }
            }
         },
         {
            "ExpressionStatement": {
               "type": "ExpressionStatement",
               "expr": {
                  "type": "CallExpression",
                  "function": {
                     "type": "IdentifierLiteral",
                     "value": "print"
                  },
                  "arguments": [
                     {
                        "type": "CallExpression",
                        "function": {
                           "type": "IdentifierLiteral",
                           "value": "test"
                        },
                        "arguments": [
                           {
                              "type": "IntegerLiteral",
                              "value": 1
                           },
                           {
                              "type": "IntegerLiteral",
                              "value": 2
                           }
                        ]
                     }
                  ]
               }
            }
         }
      ]
   }
}